import json
import glob
import os
from datetime import datetime

def generate_leaderboard():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    md = "# üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n"
    md += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        results = []
        for file in glob.glob("results/**/result.json", recursive=True):
            try:
                with open(file) as f:
                    data = json.load(f)
                username = os.path.basename(os.path.dirname(file))
                total = data['generation_time'] + data['sorting_time']
                results.append({
                    "user": username,
                    "generation": data["generation_time"],
                    "sorting": data["sorting_time"],
                    "total": total
                })
            except:
                continue
        
        if results:
            results.sort(key=lambda x: x["total"])
            md += "| –ú–µ—Å—Ç–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–º—Å) | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–º—Å) | –í—Å–µ–≥–æ (–º—Å) |\n"
            md += "|-------|-------------|----------------|-----------------|------------|\n"
            
            for i, res in enumerate(results[:10]):
                md += f"| {i+1} | {res['user']} | {res['generation']:.2f} | "
                md += f"{res['sorting']:.2f} | **{res['total']:.2f}** |\n"
        else:
            md += "## –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!\n"
            md += "–ü–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π.\n"
            
    except Exception as e:
        md += f"## –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n```\n{str(e)}\n```\n"
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    md += "\n\n## –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞\n"
    md += "| 1 | ExampleUser | 12.34 | 56.78 | **69.12** |"
    
    return md

if __name__ == "__main__":
    leaderboard = generate_leaderboard()
    with open("LEADERBOARD.md", "w") as f:
        f.write(leaderboard)
